spring.kafka.bootstrapServers=172.20.47.194:9092
spring.cloud.function.definition=stockOrders
spring.cloud.stream.bindings.stockOrders-in-0.destination=orders.buy
spring.cloud.stream.bindings.stockOrders-in-1.destination=orders.sell
spring.cloud.stream.kafka.streams.binder.functions.stockOrders.applicationId=stock-orders
spring.cloud.stream.kafka.streams.binder.configuration.spring.json.trusted.packages=*

#spring.cloud.stream.kafka.bindings.stockOrders-in-0.consumer.configuration.key.serializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.cloud.stream.kafka.bindings.stockOrders-in-0.consumer.configuration.value.deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.cloud.stream.kafka.streams.default.consumer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.kafka.streams.default.consumer.valueSerde=com.maveric.thinknxt.stock.serdes.OrderSerdes
#spring.cloud.stream.kafka.streams.bindings.stockOrders-in-0.consumer.valueSerde=com.maveric.thinknxt.stock.serdes.OrderSerdes
#spring.cloud.stream.kafka.binder.brokers=172.20.47.194:9092
#spring.cloud.stream.kafka.streams.default.consumer.applicationId=stock-orders
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
#spring.kafka.streams.application-id=stock-orders
